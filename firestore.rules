// Firestore security rules for FamSync
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function userDoc(uid) {
      return get(/databases/$(database)/documents/users/$(uid));
    }

    function requesterFamilyId() {
      return isSignedIn() ? userDoc(request.auth.uid).data.familyId : null;
    }

    function isSameFamily(familyId) {
      return isSignedIn() && requesterFamilyId() == familyId;
    }

    function requesterRole() {
      return isSignedIn() ? userDoc(request.auth.uid).data.role : null;
    }

    // Users
    match /users/{uid} {
      allow create: if isSignedIn() && request.auth.uid == uid;
      allow read: if isSignedIn() && (
        uid == request.auth.uid ||
        resource.data.familyId == requesterFamilyId()
      );
      allow update: if isSignedIn() && request.auth.uid == uid;
      allow delete: if false;
    }

    // Families root
    match /families/{familyId} {
      allow create: if isSignedIn() &&
        (request.resource.data.memberUids is list) &&
        (request.auth.uid in request.resource.data.memberUids);
      
      // Allow reading by family members OR any signed-in user for invite validation
      allow read: if isSignedIn();
      
      allow update: if isSignedIn() && (
        isSameFamily(familyId) ||
        (
          request.auth.uid in request.resource.data.memberUids && 
          !(request.auth.uid in resource.data.memberUids) &&
          resource.data.allowInvites == true &&
          request.resource.data.memberUids.size() <= resource.data.maxMembers &&
          request.resource.data.memberUids.size() == (resource.data.memberUids.size() + 1) &&
          request.resource.data.memberUids is list
        )
      );
      allow delete: if isSameFamily(familyId) && requesterRole() == 'parent';

      // Announcements
      match /announcements/{id} {
        allow read: if isSameFamily(familyId);
        allow create: if isSameFamily(familyId) && requesterRole() == 'parent';
        allow delete: if isSameFamily(familyId) && requesterRole() == 'parent';
        allow update: if false;
      }

      // Messages
      match /messages/{id} {
        allow read: if isSameFamily(familyId);
        allow create: if isSameFamily(familyId);
        allow delete: if isSameFamily(familyId) && resource.data.authorUid == request.auth.uid;
        allow update: if false;
      }
      
      // Tasks & Chores
      match /tasks/{id} {
        allow read: if isSameFamily(familyId);
        allow create: if isSameFamily(familyId);
        allow update: if isSameFamily(familyId);
        allow delete: if isSameFamily(familyId);
      }

      // Events are now nested under families for better security
      // This prevents users from seeing events from other families
      match /events/{id} {
        allow read: if isSameFamily(familyId);
        allow create: if isSameFamily(familyId);
        allow update: if isSameFamily(familyId);
        allow delete: if isSameFamily(familyId);
      }
    }

    // WORKING: Invites collection - for family invitations
    match /invites/{inviteId} {
      // Allow creation only by family members who can create invites
      allow create: if isSameFamily(request.resource.data.familyId);
      
      // Allow reading by any signed-in user for invite validation
      // This is necessary because users need to validate invites before joining
      allow read: if isSignedIn();
      
      // Allow updates only by the invite creator
      allow update: if isSignedIn() && resource.data.createdByUid == request.auth.uid;
      
      // Allow deletion only by the invite creator
      allow delete: if isSignedIn() && resource.data.createdByUid == request.auth.uid;
    }

    // WORKING: Pending members collection - for tracking invited users
    match /pendingMembers/{pendingId} {
      // Allow creation only by family members who can create invites
      allow create: if isSameFamily(request.resource.data.familyId);
      
      // Allow reading by family members and the invited user
      allow read: if isSignedIn() && (
        // Family members can read pending members
        isSameFamily(resource.data.familyId) ||
        // Invited user can read their own pending member record
        resource.data.email == userDoc(request.auth.uid).data.email
      );
      
      // Allow updates only by the inviter
      allow update: if isSignedIn() && resource.data.invitedByUid == request.auth.uid;
      
      // Allow deletion only by the inviter
      allow delete: if isSignedIn() && resource.data.invitedByUid == request.auth.uid;
    }
  }
}
