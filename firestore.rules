// Firestore security rules for FamSync - Production Ready
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ===== HELPER FUNCTIONS =====
    
    /// Check if user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    /// Get user document data
    function userDoc(uid) {
      return get(/databases/$(database)/documents/users/$(uid));
    }

    /// Get current user's family ID
    function requesterFamilyId() {
      return isSignedIn() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) ? 
             userDoc(request.auth.uid).data.familyId : null;
    }

    /// Check if user belongs to the specified family
    function isSameFamily(familyId) {
      return isSignedIn() && requesterFamilyId() == familyId;
    }

    /// Get current user's role
    function requesterRole() {
      return isSignedIn() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) ? 
             userDoc(request.auth.uid).data.role : null;
    }

    /// Check if user is a parent/owner
    function isParent() {
      return requesterRole() == 'parent';
    }

    /// Check if user is the family owner
    function isFamilyOwner(familyId) {
      return isSameFamily(familyId) && 
             get(/databases/$(database)/documents/families/$(familyId)).data.ownerUid == request.auth.uid;
    }

    // ===== USER MANAGEMENT =====
    
    match /users/{uid} {
      // Users can create their own profile
      allow create: if isSignedIn() && request.auth.uid == uid;
      
      // Users can read their own profile and family members' profiles
      allow read: if isSignedIn() && (
        uid == request.auth.uid ||
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         resource.data.familyId == requesterFamilyId())
      );
      
      // Users can update their own profile
      allow update: if isSignedIn() && request.auth.uid == uid;
      
      // No deletion allowed (data preservation)
      allow delete: if false;
    }

    // ===== FAMILY MANAGEMENT =====
    
    match /families/{familyId} {
      // Allow family creation by signed-in users
      allow create: if isSignedIn() &&
        (request.resource.data.memberUids is list) &&
        (request.auth.uid in request.resource.data.memberUids);
      
      // Allow reading by family members OR any signed-in user for invite validation
      allow read: if isSignedIn();
      
      // Allow updates by family members OR for invite acceptance
      allow update: if isSignedIn() && (
        // Family members can update family data
        isSameFamily(familyId) ||
        // Allow users to join via invites (simplified condition)
        (
          request.auth.uid in request.resource.data.memberUids && 
          !(request.auth.uid in resource.data.memberUids)
        )
      );
      
      // Only family owners can delete families
      allow delete: if isFamilyOwner(familyId);

      // ===== FAMILY ANNOUNCEMENTS =====
      match /announcements/{id} {
        allow read: if isSameFamily(familyId);
        allow create: if isSameFamily(familyId) && isParent();
        allow update: if isSameFamily(familyId) && isParent();
        allow delete: if isSameFamily(familyId) && isParent();
      }

      // ===== FAMILY MESSAGES =====
      match /messages/{id} {
        allow read: if isSameFamily(familyId);
        allow create: if isSameFamily(familyId);
        allow update: if isSameFamily(familyId) && resource.data.authorUid == request.auth.uid;
        allow delete: if isSameFamily(familyId) && resource.data.authorUid == request.auth.uid;
      }
      
      // ===== FAMILY TASKS =====
      match /tasks/{id} {
        allow read: if isSameFamily(familyId);
        allow create: if isSameFamily(familyId);
        allow update: if isSameFamily(familyId);
        allow delete: if isSameFamily(familyId) && isParent();
      }

      // ===== FAMILY EVENTS =====
      match /events/{id} {
        allow read: if isSameFamily(familyId);
        allow create: if isSameFamily(familyId);
        allow update: if isSameFamily(familyId);
        allow delete: if isSameFamily(familyId) && isParent();
      }
    }

    // ===== INVITE SYSTEM =====
    
    match /invites/{inviteId} {
      // Allow creation only by family members who can create invites
      allow create: if isSignedIn() && isSameFamily(request.resource.data.familyId);
      
      // Allow reading by any signed-in user for invite validation
      allow read: if isSignedIn();
      
      // Allow updates only by the invite creator
      allow update: if isSignedIn() && resource.data.createdByUid == request.auth.uid;
      
      // Allow deletion only by the invite creator
      allow delete: if isSignedIn() && resource.data.createdByUid == request.auth.uid;
    }

    // ===== PENDING MEMBERS =====
    
    match /pendingMembers/{pendingId} {
      // Allow creation only by family members who can create invites
      allow create: if isSignedIn() && isSameFamily(request.resource.data.familyId);
      
      // Allow reading by family members and the invited user
      allow read: if isSignedIn() && (
        // Family members can read pending members
        isSameFamily(resource.data.familyId) ||
        // Invited user can read their own pending member record
        resource.data.email == userDoc(request.auth.uid).data.email
      );
      
      // Allow updates only by the inviter
      allow update: if isSignedIn() && resource.data.invitedByUid == request.auth.uid;
      
      // Allow deletion only by the inviter
      allow delete: if isSignedIn() && resource.data.invitedByUid == request.auth.uid;
    }
  }
}
